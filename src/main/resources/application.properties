spring.application.name=springbootproject
debug=false

# Para proteger dados sensíveis é indicado guardá-los em variáveis de ambiente do próprio sistema operacional
# Para isso fazemos ${ENVIRONMENT_VARIABLE}

# (Não é o caso do PostgreSQL) Em alguns bancos de dados é possivel fazer: 
# => spring.datasource.url=jdbc:postgresql://localhost/fentanes_inc_database?createDatabaseIfNotExists=true
spring.datasource.url=jdbc:postgresql://${POSTGRES_DB_HOST}/${POSTGRES_DB_NAME}
spring.datasource.username=${POSTGRES_DB_USER}
spring.datasource.password=${POSTGRES_DB_PASSWORD}
spring.datasource.driver-class-name=org.postgresql.Driver
hibernate.dialect=org.hibernate.dialect.HSQLDialect

# Esta configuração faz com que
# caso haja um novo campo no objeto 
# que não é representado por uma coluna no banco de dados 
# então o proprio JPA irá criar esta coluna de acordo com o campo do objeto
spring.jpa.hibernate.ddl-auto=update